// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/mongo"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	vocabulary_domain "clean-architecture/domain/vocabulary"
)

// IVocabularyUseCase is an autogenerated mock type for the IVocabularyUseCase type
type IVocabularyUseCase struct {
	mock.Mock
}

// CreateOneByNameUnitInAdmin provides a mock function with given fields: ctx, vocabulary
func (_m *IVocabularyUseCase) CreateOneByNameUnitInAdmin(ctx context.Context, vocabulary *vocabulary_domain.Vocabulary) error {
	ret := _m.Called(ctx, vocabulary)

	if len(ret) == 0 {
		panic("no return value specified for CreateOneByNameUnitInAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *vocabulary_domain.Vocabulary) error); ok {
		r0 = rf(ctx, vocabulary)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOneInAdmin provides a mock function with given fields: ctx, vocabulary
func (_m *IVocabularyUseCase) CreateOneInAdmin(ctx context.Context, vocabulary *vocabulary_domain.Vocabulary) error {
	ret := _m.Called(ctx, vocabulary)

	if len(ret) == 0 {
		panic("no return value specified for CreateOneInAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *vocabulary_domain.Vocabulary) error); ok {
		r0 = rf(ctx, vocabulary)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOneInAdmin provides a mock function with given fields: ctx, vocabularyID
func (_m *IVocabularyUseCase) DeleteOneInAdmin(ctx context.Context, vocabularyID string) error {
	ret := _m.Called(ctx, vocabularyID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOneInAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, vocabularyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchByIdUnitInAdmin provides a mock function with given fields: ctx, idUnit
func (_m *IVocabularyUseCase) FetchByIdUnitInAdmin(ctx context.Context, idUnit string) ([]vocabulary_domain.Vocabulary, error) {
	ret := _m.Called(ctx, idUnit)

	if len(ret) == 0 {
		panic("no return value specified for FetchByIdUnitInAdmin")
	}

	var r0 []vocabulary_domain.Vocabulary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]vocabulary_domain.Vocabulary, error)); ok {
		return rf(ctx, idUnit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []vocabulary_domain.Vocabulary); ok {
		r0 = rf(ctx, idUnit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vocabulary_domain.Vocabulary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, idUnit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchByLessonInBoth provides a mock function with given fields: ctx, unitName
func (_m *IVocabularyUseCase) FetchByLessonInBoth(ctx context.Context, unitName string) (vocabulary_domain.SearchingResponse, error) {
	ret := _m.Called(ctx, unitName)

	if len(ret) == 0 {
		panic("no return value specified for FetchByLessonInBoth")
	}

	var r0 vocabulary_domain.SearchingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (vocabulary_domain.SearchingResponse, error)); ok {
		return rf(ctx, unitName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) vocabulary_domain.SearchingResponse); ok {
		r0 = rf(ctx, unitName)
	} else {
		r0 = ret.Get(0).(vocabulary_domain.SearchingResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, unitName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchByWordInBoth provides a mock function with given fields: ctx, word
func (_m *IVocabularyUseCase) FetchByWordInBoth(ctx context.Context, word string) (vocabulary_domain.SearchingResponse, error) {
	ret := _m.Called(ctx, word)

	if len(ret) == 0 {
		panic("no return value specified for FetchByWordInBoth")
	}

	var r0 vocabulary_domain.SearchingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (vocabulary_domain.SearchingResponse, error)); ok {
		return rf(ctx, word)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) vocabulary_domain.SearchingResponse); ok {
		r0 = rf(ctx, word)
	} else {
		r0 = ret.Get(0).(vocabulary_domain.SearchingResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, word)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchManyInBoth provides a mock function with given fields: ctx, page
func (_m *IVocabularyUseCase) FetchManyInBoth(ctx context.Context, page string) (vocabulary_domain.Response, error) {
	ret := _m.Called(ctx, page)

	if len(ret) == 0 {
		panic("no return value specified for FetchManyInBoth")
	}

	var r0 vocabulary_domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (vocabulary_domain.Response, error)); ok {
		return rf(ctx, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) vocabulary_domain.Response); ok {
		r0 = rf(ctx, page)
	} else {
		r0 = ret.Get(0).(vocabulary_domain.Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindVocabularyIDByVocabularyConfigInAdmin provides a mock function with given fields: ctx, word
func (_m *IVocabularyUseCase) FindVocabularyIDByVocabularyConfigInAdmin(ctx context.Context, word string) (primitive.ObjectID, error) {
	ret := _m.Called(ctx, word)

	if len(ret) == 0 {
		panic("no return value specified for FindVocabularyIDByVocabularyConfigInAdmin")
	}

	var r0 primitive.ObjectID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (primitive.ObjectID, error)); ok {
		return rf(ctx, word)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) primitive.ObjectID); ok {
		r0 = rf(ctx, word)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(primitive.ObjectID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, word)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllVocabularyInAdmin provides a mock function with given fields: ctx
func (_m *IVocabularyUseCase) GetAllVocabularyInAdmin(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllVocabularyInAdmin")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestVocabularyInAdmin provides a mock function with given fields: ctx
func (_m *IVocabularyUseCase) GetLatestVocabularyInAdmin(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestVocabularyInAdmin")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVocabularyByIdInAdmin provides a mock function with given fields: ctx, id
func (_m *IVocabularyUseCase) GetVocabularyByIdInAdmin(ctx context.Context, id string) (vocabulary_domain.Vocabulary, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetVocabularyByIdInAdmin")
	}

	var r0 vocabulary_domain.Vocabulary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (vocabulary_domain.Vocabulary, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) vocabulary_domain.Vocabulary); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(vocabulary_domain.Vocabulary)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIsFavouriteInUser provides a mock function with given fields: ctx, vocabularyID, isFavourite
func (_m *IVocabularyUseCase) UpdateIsFavouriteInUser(ctx context.Context, vocabularyID string, isFavourite int) error {
	ret := _m.Called(ctx, vocabularyID, isFavourite)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIsFavouriteInUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, vocabularyID, isFavourite)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOneAudioInAdmin provides a mock function with given fields: ctx, vocabulary
func (_m *IVocabularyUseCase) UpdateOneAudioInAdmin(ctx context.Context, vocabulary *vocabulary_domain.Vocabulary) error {
	ret := _m.Called(ctx, vocabulary)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOneAudioInAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *vocabulary_domain.Vocabulary) error); ok {
		r0 = rf(ctx, vocabulary)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOneImageInAdmin provides a mock function with given fields: ctx, vocabulary
func (_m *IVocabularyUseCase) UpdateOneImageInAdmin(ctx context.Context, vocabulary *vocabulary_domain.Vocabulary) (*mongo.UpdateResult, error) {
	ret := _m.Called(ctx, vocabulary)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOneImageInAdmin")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vocabulary_domain.Vocabulary) (*mongo.UpdateResult, error)); ok {
		return rf(ctx, vocabulary)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vocabulary_domain.Vocabulary) *mongo.UpdateResult); ok {
		r0 = rf(ctx, vocabulary)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vocabulary_domain.Vocabulary) error); ok {
		r1 = rf(ctx, vocabulary)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOneInAdmin provides a mock function with given fields: ctx, vocabulary
func (_m *IVocabularyUseCase) UpdateOneInAdmin(ctx context.Context, vocabulary *vocabulary_domain.Vocabulary) (*mongo.UpdateResult, error) {
	ret := _m.Called(ctx, vocabulary)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOneInAdmin")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vocabulary_domain.Vocabulary) (*mongo.UpdateResult, error)); ok {
		return rf(ctx, vocabulary)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vocabulary_domain.Vocabulary) *mongo.UpdateResult); ok {
		r0 = rf(ctx, vocabulary)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vocabulary_domain.Vocabulary) error); ok {
		r1 = rf(ctx, vocabulary)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVocabularyProcess provides a mock function with given fields: ctx, vocabularyID, process
func (_m *IVocabularyUseCase) UpdateVocabularyProcess(ctx context.Context, vocabularyID string, process vocabulary_domain.VocabularyProcess) error {
	ret := _m.Called(ctx, vocabularyID, process)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVocabularyProcess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, vocabulary_domain.VocabularyProcess) error); ok {
		r0 = rf(ctx, vocabularyID, process)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIVocabularyUseCase creates a new instance of IVocabularyUseCase. It also registers a testing interface on the mock and a cleanup function to assert the test expectations.
// The first argument is typically a *testing.T value.
func NewIVocabularyUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IVocabularyUseCase {
	mock := &IVocabularyUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
