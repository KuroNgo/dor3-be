// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	lesson_domain "clean-architecture/domain/lesson"
	context "context"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// ILessonUseCase is an autogenerated mock type for the ILessonUseCase type
type ILessonUseCase struct {
	mock.Mock
}

// CreateOneByNameCourseInAdmin provides a mock function with given fields: ctx, lesson
func (_m *ILessonUseCase) CreateOneByNameCourseInAdmin(ctx context.Context, lesson *lesson_domain.Lesson) error {
	ret := _m.Called(ctx, lesson)

	if len(ret) == 0 {
		panic("no return value specified for CreateOneByNameCourseInAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lesson_domain.Lesson) error); ok {
		r0 = rf(ctx, lesson)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOneInAdmin provides a mock function with given fields: ctx, lesson
func (_m *ILessonUseCase) CreateOneInAdmin(ctx context.Context, lesson *lesson_domain.Lesson) error {
	ret := _m.Called(ctx, lesson)

	if len(ret) == 0 {
		panic("no return value specified for CreateOneInAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lesson_domain.Lesson) error); ok {
		r0 = rf(ctx, lesson)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOneInAdmin provides a mock function with given fields: ctx, lessonID
func (_m *ILessonUseCase) DeleteOneInAdmin(ctx context.Context, lessonID string) error {
	ret := _m.Called(ctx, lessonID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOneInAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, lessonID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchByIDCourseInUser provides a mock function with given fields: ctx, userID, courseID, page
func (_m *ILessonUseCase) FetchByIDCourseInUser(ctx context.Context, userID primitive.ObjectID, courseID string, page string) ([]lesson_domain.LessonProcessResponse, lesson_domain.DetailResponse, error) {
	ret := _m.Called(ctx, userID, courseID, page)

	if len(ret) == 0 {
		panic("no return value specified for FetchByIDCourseInUser")
	}

	var r0 []lesson_domain.LessonProcessResponse
	var r1 lesson_domain.DetailResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, string, string) ([]lesson_domain.LessonProcessResponse, lesson_domain.DetailResponse, error)); ok {
		return rf(ctx, userID, courseID, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, string, string) []lesson_domain.LessonProcessResponse); ok {
		r0 = rf(ctx, userID, courseID, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]lesson_domain.LessonProcessResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, string, string) lesson_domain.DetailResponse); ok {
		r1 = rf(ctx, userID, courseID, page)
	} else {
		r1 = ret.Get(1).(lesson_domain.DetailResponse)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID, string, string) error); ok {
		r2 = rf(ctx, userID, courseID, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FetchByIDInAdmin provides a mock function with given fields: ctx, lessonID
func (_m *ILessonUseCase) FetchByIDInAdmin(ctx context.Context, lessonID string) (lesson_domain.LessonResponse, error) {
	ret := _m.Called(ctx, lessonID)

	if len(ret) == 0 {
		panic("no return value specified for FetchByIDInAdmin")
	}

	var r0 lesson_domain.LessonResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (lesson_domain.LessonResponse, error)); ok {
		return rf(ctx, lessonID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) lesson_domain.LessonResponse); ok {
		r0 = rf(ctx, lessonID)
	} else {
		r0 = ret.Get(0).(lesson_domain.LessonResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, lessonID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchByIDInUser provides a mock function with given fields: ctx, userID, lessonID
func (_m *ILessonUseCase) FetchByIDInUser(ctx context.Context, userID primitive.ObjectID, lessonID string) (lesson_domain.LessonProcessResponse, error) {
	ret := _m.Called(ctx, userID, lessonID)

	if len(ret) == 0 {
		panic("no return value specified for FetchByIDInUser")
	}

	var r0 lesson_domain.LessonProcessResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, string) (lesson_domain.LessonProcessResponse, error)); ok {
		return rf(ctx, userID, lessonID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, string) lesson_domain.LessonProcessResponse); ok {
		r0 = rf(ctx, userID, lessonID)
	} else {
		r0 = ret.Get(0).(lesson_domain.LessonProcessResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, string) error); ok {
		r1 = rf(ctx, userID, lessonID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchByIdCourseInAdmin provides a mock function with given fields: ctx, idCourse, page
func (_m *ILessonUseCase) FetchByIdCourseInAdmin(ctx context.Context, idCourse string, page string) ([]lesson_domain.LessonResponse, lesson_domain.DetailResponse, error) {
	ret := _m.Called(ctx, idCourse, page)

	if len(ret) == 0 {
		panic("no return value specified for FetchByIdCourseInAdmin")
	}

	var r0 []lesson_domain.LessonResponse
	var r1 lesson_domain.DetailResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]lesson_domain.LessonResponse, lesson_domain.DetailResponse, error)); ok {
		return rf(ctx, idCourse, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []lesson_domain.LessonResponse); ok {
		r0 = rf(ctx, idCourse, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]lesson_domain.LessonResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) lesson_domain.DetailResponse); ok {
		r1 = rf(ctx, idCourse, page)
	} else {
		r1 = ret.Get(1).(lesson_domain.DetailResponse)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, idCourse, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FetchManyInAdmin provides a mock function with given fields: ctx, page
func (_m *ILessonUseCase) FetchManyInAdmin(ctx context.Context, page string) ([]lesson_domain.LessonResponse, lesson_domain.DetailResponse, error) {
	ret := _m.Called(ctx, page)

	if len(ret) == 0 {
		panic("no return value specified for FetchManyInAdmin")
	}

	var r0 []lesson_domain.LessonResponse
	var r1 lesson_domain.DetailResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]lesson_domain.LessonResponse, lesson_domain.DetailResponse, error)); ok {
		return rf(ctx, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []lesson_domain.LessonResponse); ok {
		r0 = rf(ctx, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]lesson_domain.LessonResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) lesson_domain.DetailResponse); ok {
		r1 = rf(ctx, page)
	} else {
		r1 = ret.Get(1).(lesson_domain.DetailResponse)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FetchManyInUser provides a mock function with given fields: ctx, userID, page
func (_m *ILessonUseCase) FetchManyInUser(ctx context.Context, userID primitive.ObjectID, page string) ([]lesson_domain.LessonProcessResponse, lesson_domain.DetailResponse, error) {
	ret := _m.Called(ctx, userID, page)

	if len(ret) == 0 {
		panic("no return value specified for FetchManyInUser")
	}

	var r0 []lesson_domain.LessonProcessResponse
	var r1 lesson_domain.DetailResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, string) ([]lesson_domain.LessonProcessResponse, lesson_domain.DetailResponse, error)); ok {
		return rf(ctx, userID, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, string) []lesson_domain.LessonProcessResponse); ok {
		r0 = rf(ctx, userID, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]lesson_domain.LessonProcessResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, string) lesson_domain.DetailResponse); ok {
		r1 = rf(ctx, userID, page)
	} else {
		r1 = ret.Get(1).(lesson_domain.DetailResponse)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID, string) error); ok {
		r2 = rf(ctx, userID, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FetchManyNotPaginationInAdmin provides a mock function with given fields: ctx
func (_m *ILessonUseCase) FetchManyNotPaginationInAdmin(ctx context.Context) ([]lesson_domain.LessonResponse, lesson_domain.DetailResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchManyNotPaginationInAdmin")
	}

	var r0 []lesson_domain.LessonResponse
	var r1 lesson_domain.DetailResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]lesson_domain.LessonResponse, lesson_domain.DetailResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []lesson_domain.LessonResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]lesson_domain.LessonResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) lesson_domain.DetailResponse); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(lesson_domain.DetailResponse)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FetchManyNotPaginationInUser provides a mock function with given fields: ctx, userID
func (_m *ILessonUseCase) FetchManyNotPaginationInUser(ctx context.Context, userID primitive.ObjectID) ([]lesson_domain.LessonProcessResponse, lesson_domain.DetailResponse, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FetchManyNotPaginationInUser")
	}

	var r0 []lesson_domain.LessonProcessResponse
	var r1 lesson_domain.DetailResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) ([]lesson_domain.LessonProcessResponse, lesson_domain.DetailResponse, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) []lesson_domain.LessonProcessResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]lesson_domain.LessonProcessResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) lesson_domain.DetailResponse); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Get(1).(lesson_domain.DetailResponse)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID) error); ok {
		r2 = rf(ctx, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindLessonIDByLessonNameInAdmin provides a mock function with given fields: ctx, lessonName
func (_m *ILessonUseCase) FindLessonIDByLessonNameInAdmin(ctx context.Context, lessonName string) (primitive.ObjectID, error) {
	ret := _m.Called(ctx, lessonName)

	if len(ret) == 0 {
		panic("no return value specified for FindLessonIDByLessonNameInAdmin")
	}

	var r0 primitive.ObjectID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (primitive.ObjectID, error)); ok {
		return rf(ctx, lessonName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) primitive.ObjectID); ok {
		r0 = rf(ctx, lessonName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(primitive.ObjectID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, lessonName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCompleteInUser provides a mock function with given fields: ctx, user
func (_m *ILessonUseCase) UpdateCompleteInUser(ctx context.Context, user primitive.ObjectID) (*mongo.UpdateResult, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCompleteInUser")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (*mongo.UpdateResult, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *mongo.UpdateResult); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateImageInAdmin provides a mock function with given fields: ctx, lesson
func (_m *ILessonUseCase) UpdateImageInAdmin(ctx context.Context, lesson *lesson_domain.Lesson) (*mongo.UpdateResult, error) {
	ret := _m.Called(ctx, lesson)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImageInAdmin")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lesson_domain.Lesson) (*mongo.UpdateResult, error)); ok {
		return rf(ctx, lesson)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lesson_domain.Lesson) *mongo.UpdateResult); ok {
		r0 = rf(ctx, lesson)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lesson_domain.Lesson) error); ok {
		r1 = rf(ctx, lesson)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOneInAdmin provides a mock function with given fields: ctx, lesson
func (_m *ILessonUseCase) UpdateOneInAdmin(ctx context.Context, lesson *lesson_domain.Lesson) (*mongo.UpdateResult, error) {
	ret := _m.Called(ctx, lesson)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOneInAdmin")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lesson_domain.Lesson) (*mongo.UpdateResult, error)); ok {
		return rf(ctx, lesson)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lesson_domain.Lesson) *mongo.UpdateResult); ok {
		r0 = rf(ctx, lesson)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lesson_domain.Lesson) error); ok {
		r1 = rf(ctx, lesson)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewILessonUseCase creates a new instance of ILessonUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILessonUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILessonUseCase {
	mock := &ILessonUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
