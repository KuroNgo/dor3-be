// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	lesson "clean-architecture/domain/lesson"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ICourseRepository is an autogenerated mock type for the ICourseRepository type
type ICourseRepository struct {
	mock.Mock
}

// CreateOne provides a mock function with given fields: ctx, _a1
func (_m *ICourseRepository) CreateOne(ctx context.Context, _a1 *lesson.Lesson) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lesson.Lesson) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOne provides a mock function with given fields: ctx, lessonID
func (_m *ICourseRepository) DeleteOne(ctx context.Context, lessonID string) error {
	ret := _m.Called(ctx, lessonID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, lessonID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchByID provides a mock function with given fields: ctx, lessonID
func (_m *ICourseRepository) FetchByID(ctx context.Context, lessonID string) (*lesson.Lesson, error) {
	ret := _m.Called(ctx, lessonID)

	if len(ret) == 0 {
		panic("no return value specified for FetchByID")
	}

	var r0 *lesson.Lesson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*lesson.Lesson, error)); ok {
		return rf(ctx, lessonID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *lesson.Lesson); ok {
		r0 = rf(ctx, lessonID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lesson.Lesson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, lessonID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchMany provides a mock function with given fields: ctx
func (_m *ICourseRepository) FetchMany(ctx context.Context) ([]lesson.Lesson, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchMany")
	}

	var r0 []lesson.Lesson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]lesson.Lesson, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []lesson.Lesson); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]lesson.Lesson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchToDeleteMany provides a mock function with given fields: ctx
func (_m *ICourseRepository) FetchToDeleteMany(ctx context.Context) (*[]lesson.Lesson, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchToDeleteMany")
	}

	var r0 *[]lesson.Lesson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]lesson.Lesson, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]lesson.Lesson); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]lesson.Lesson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOne provides a mock function with given fields: ctx, lessonID, _a2
func (_m *ICourseRepository) UpdateOne(ctx context.Context, lessonID string, _a2 lesson.Lesson) error {
	ret := _m.Called(ctx, lessonID, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, lesson.Lesson) error); ok {
		r0 = rf(ctx, lessonID, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertOne provides a mock function with given fields: ctx, id, _a2
func (_m *ICourseRepository) UpsertOne(ctx context.Context, id string, _a2 *lesson.Lesson) (*lesson.Lesson, error) {
	ret := _m.Called(ctx, id, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpsertOne")
	}

	var r0 *lesson.Lesson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *lesson.Lesson) (*lesson.Lesson, error)); ok {
		return rf(ctx, id, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *lesson.Lesson) *lesson.Lesson); ok {
		r0 = rf(ctx, id, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lesson.Lesson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *lesson.Lesson) error); ok {
		r1 = rf(ctx, id, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICourseRepository creates a new instance of ICourseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICourseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICourseRepository {
	mock := &ICourseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
