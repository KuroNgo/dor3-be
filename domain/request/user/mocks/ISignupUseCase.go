// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	user_domain "clean-architecture/domain/request/user"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ISignupUseCase is an autogenerated mock type for the ISignupUseCase type
type ISignupUseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, user
func (_m *ISignupUseCase) Create(c context.Context, user *user_domain.User) error {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *user_domain.User) error); ok {
		r0 = rf(c, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAccessToken provides a mock function with given fields: user, secret, expiry
func (_m *ISignupUseCase) CreateAccessToken(user *user_domain.User, secret string, expiry int) (string, error) {
	ret := _m.Called(user, secret, expiry)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*user_domain.User, string, int) (string, error)); ok {
		return rf(user, secret, expiry)
	}
	if rf, ok := ret.Get(0).(func(*user_domain.User, string, int) string); ok {
		r0 = rf(user, secret, expiry)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*user_domain.User, string, int) error); ok {
		r1 = rf(user, secret, expiry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRefreshToken provides a mock function with given fields: user, secret, expiry
func (_m *ISignupUseCase) CreateRefreshToken(user *user_domain.User, secret string, expiry int) (string, error) {
	ret := _m.Called(user, secret, expiry)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*user_domain.User, string, int) (string, error)); ok {
		return rf(user, secret, expiry)
	}
	if rf, ok := ret.Get(0).(func(*user_domain.User, string, int) string); ok {
		r0 = rf(user, secret, expiry)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*user_domain.User, string, int) error); ok {
		r1 = rf(user, secret, expiry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: c, email
func (_m *ISignupUseCase) GetUserByEmail(c context.Context, email string) (user_domain.User, error) {
	ret := _m.Called(c, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 user_domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (user_domain.User, error)); ok {
		return rf(c, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) user_domain.User); ok {
		r0 = rf(c, email)
	} else {
		r0 = ret.Get(0).(user_domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: c, username
func (_m *ISignupUseCase) GetUserByUsername(c context.Context, username string) (user_domain.User, error) {
	ret := _m.Called(c, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 user_domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (user_domain.User, error)); ok {
		return rf(c, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) user_domain.User); ok {
		r0 = rf(c, username)
	} else {
		r0 = ret.Get(0).(user_domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewISignupUseCase creates a new instance of ISignupUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISignupUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISignupUseCase {
	mock := &ISignupUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
