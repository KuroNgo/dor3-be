// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	audio_domain "clean-architecture/domain/audio"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IAudioRepository is an autogenerated mock type for the IAudioRepository type
type IAudioRepository struct {
	mock.Mock
}

// CreateOne provides a mock function with given fields: ctx, audio
func (_m *IAudioRepository) CreateOne(ctx context.Context, audio *audio_domain.AutoMatch) error {
	ret := _m.Called(ctx, audio)

	if len(ret) == 0 {
		panic("no return value specified for CreateOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *audio_domain.AutoMatch) error); ok {
		r0 = rf(ctx, audio)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMany provides a mock function with given fields: ctx, audioID
func (_m *IAudioRepository) DeleteMany(ctx context.Context, audioID ...string) error {
	_va := make([]interface{}, len(audioID))
	for _i := range audioID {
		_va[_i] = audioID[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) error); ok {
		r0 = rf(ctx, audioID...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOne provides a mock function with given fields: ctx, audioID
func (_m *IAudioRepository) DeleteOne(ctx context.Context, audioID string) error {
	ret := _m.Called(ctx, audioID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, audioID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchByID provides a mock function with given fields: ctx, audioID
func (_m *IAudioRepository) FetchByID(ctx context.Context, audioID string) (*audio_domain.Audio, error) {
	ret := _m.Called(ctx, audioID)

	if len(ret) == 0 {
		panic("no return value specified for FetchByID")
	}

	var r0 *audio_domain.Audio
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*audio_domain.Audio, error)); ok {
		return rf(ctx, audioID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *audio_domain.Audio); ok {
		r0 = rf(ctx, audioID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*audio_domain.Audio)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, audioID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchMany provides a mock function with given fields: ctx
func (_m *IAudioRepository) FetchMany(ctx context.Context) ([]audio_domain.Audio, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchMany")
	}

	var r0 []audio_domain.Audio
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]audio_domain.Audio, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []audio_domain.Audio); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]audio_domain.Audio)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchToDeleteMany provides a mock function with given fields: ctx
func (_m *IAudioRepository) FetchToDeleteMany(ctx context.Context) (*[]audio_domain.Audio, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchToDeleteMany")
	}

	var r0 *[]audio_domain.Audio
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]audio_domain.Audio, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]audio_domain.Audio); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]audio_domain.Audio)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOne provides a mock function with given fields: ctx, audioID, audio
func (_m *IAudioRepository) UpdateOne(ctx context.Context, audioID string, audio audio_domain.Audio) error {
	ret := _m.Called(ctx, audioID, audio)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, audio_domain.Audio) error); ok {
		r0 = rf(ctx, audioID, audio)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIAudioRepository creates a new instance of IAudioRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAudioRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAudioRepository {
	mock := &IAudioRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
