// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	google "clean-architecture/internal/oauth2/google"
	context "context"

	mock "github.com/stretchr/testify/mock"

	user_domain "clean-architecture/domain/user"
)

// IGoogleAuthUseCase is an autogenerated mock type for the IGoogleAuthUseCase type
type IGoogleAuthUseCase struct {
	mock.Mock
}

// GetGoogleOauthToken provides a mock function with given fields: code
func (_m *IGoogleAuthUseCase) GetGoogleOauthToken(code string) (*google.OauthToken, error) {
	ret := _m.Called(code)

	if len(ret) == 0 {
		panic("no return value specified for GetGoogleOauthToken")
	}

	var r0 *google.OauthToken
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*google.OauthToken, error)); ok {
		return rf(code)
	}
	if rf, ok := ret.Get(0).(func(string) *google.OauthToken); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.OauthToken)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGoogleUser provides a mock function with given fields: accessToken, idToken
func (_m *IGoogleAuthUseCase) GetGoogleUser(accessToken string, idToken string) (*google.UserResult, error) {
	ret := _m.Called(accessToken, idToken)

	if len(ret) == 0 {
		panic("no return value specified for GetGoogleUser")
	}

	var r0 *google.UserResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*google.UserResult, error)); ok {
		return rf(accessToken, idToken)
	}
	if rf, ok := ret.Get(0).(func(string, string) *google.UserResult); ok {
		r0 = rf(accessToken, idToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.UserResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(accessToken, idToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertUser provides a mock function with given fields: c, email, user
func (_m *IGoogleAuthUseCase) UpsertUser(c context.Context, email string, user *user_domain.User) (*user_domain.Response, error) {
	ret := _m.Called(c, email, user)

	if len(ret) == 0 {
		panic("no return value specified for UpsertUser")
	}

	var r0 *user_domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *user_domain.User) (*user_domain.Response, error)); ok {
		return rf(c, email, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *user_domain.User) *user_domain.Response); ok {
		r0 = rf(c, email, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *user_domain.User) error); ok {
		r1 = rf(c, email, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIGoogleAuthUseCase creates a new instance of IGoogleAuthUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIGoogleAuthUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IGoogleAuthUseCase {
	mock := &IGoogleAuthUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
