// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	course_domain "clean-architecture/domain/course"
	context "context"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// ICourseRepository is an autogenerated mock type for the ICourseRepository type
type ICourseRepository struct {
	mock.Mock
}

// CreateOneInAdmin provides a mock function with given fields: ctx, course
func (_m *ICourseRepository) CreateOneInAdmin(ctx context.Context, course *course_domain.Course) error {
	ret := _m.Called(ctx, course)

	if len(ret) == 0 {
		panic("no return value specified for CreateOneInAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *course_domain.Course) error); ok {
		r0 = rf(ctx, course)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOneInAdmin provides a mock function with given fields: ctx, courseID
func (_m *ICourseRepository) DeleteOneInAdmin(ctx context.Context, courseID string) error {
	ret := _m.Called(ctx, courseID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOneInAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, courseID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchByIDInAdmin provides a mock function with given fields: ctx, courseID
func (_m *ICourseRepository) FetchByIDInAdmin(ctx context.Context, courseID string) (course_domain.CourseResponse, error) {
	ret := _m.Called(ctx, courseID)

	if len(ret) == 0 {
		panic("no return value specified for FetchByIDInAdmin")
	}

	var r0 course_domain.CourseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (course_domain.CourseResponse, error)); ok {
		return rf(ctx, courseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) course_domain.CourseResponse); ok {
		r0 = rf(ctx, courseID)
	} else {
		r0 = ret.Get(0).(course_domain.CourseResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchByIDInUser provides a mock function with given fields: ctx, userID, courseID
func (_m *ICourseRepository) FetchByIDInUser(ctx context.Context, userID primitive.ObjectID, courseID string) (course_domain.CourseProcess, error) {
	ret := _m.Called(ctx, userID, courseID)

	if len(ret) == 0 {
		panic("no return value specified for FetchByIDInUser")
	}

	var r0 course_domain.CourseProcess
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, string) (course_domain.CourseProcess, error)); ok {
		return rf(ctx, userID, courseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, string) course_domain.CourseProcess); ok {
		r0 = rf(ctx, userID, courseID)
	} else {
		r0 = ret.Get(0).(course_domain.CourseProcess)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, string) error); ok {
		r1 = rf(ctx, userID, courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchManyForEachCourseInAdmin provides a mock function with given fields: ctx, page
func (_m *ICourseRepository) FetchManyForEachCourseInAdmin(ctx context.Context, page string) ([]course_domain.CourseResponse, course_domain.DetailForManyResponse, error) {
	ret := _m.Called(ctx, page)

	if len(ret) == 0 {
		panic("no return value specified for FetchManyForEachCourseInAdmin")
	}

	var r0 []course_domain.CourseResponse
	var r1 course_domain.DetailForManyResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]course_domain.CourseResponse, course_domain.DetailForManyResponse, error)); ok {
		return rf(ctx, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []course_domain.CourseResponse); ok {
		r0 = rf(ctx, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]course_domain.CourseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) course_domain.DetailForManyResponse); ok {
		r1 = rf(ctx, page)
	} else {
		r1 = ret.Get(1).(course_domain.DetailForManyResponse)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FetchManyInUser provides a mock function with given fields: ctx, userID, page
func (_m *ICourseRepository) FetchManyInUser(ctx context.Context, userID primitive.ObjectID, page string) ([]course_domain.CourseProcess, course_domain.DetailForManyResponse, error) {
	ret := _m.Called(ctx, userID, page)

	if len(ret) == 0 {
		panic("no return value specified for FetchManyInUser")
	}

	var r0 []course_domain.CourseProcess
	var r1 course_domain.DetailForManyResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, string) ([]course_domain.CourseProcess, course_domain.DetailForManyResponse, error)); ok {
		return rf(ctx, userID, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, string) []course_domain.CourseProcess); ok {
		r0 = rf(ctx, userID, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]course_domain.CourseProcess)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, string) course_domain.DetailForManyResponse); ok {
		r1 = rf(ctx, userID, page)
	} else {
		r1 = ret.Get(1).(course_domain.DetailForManyResponse)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID, string) error); ok {
		r2 = rf(ctx, userID, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindCourseIDByCourseNameInAdmin provides a mock function with given fields: ctx, courseName
func (_m *ICourseRepository) FindCourseIDByCourseNameInAdmin(ctx context.Context, courseName string) (primitive.ObjectID, error) {
	ret := _m.Called(ctx, courseName)

	if len(ret) == 0 {
		panic("no return value specified for FindCourseIDByCourseNameInAdmin")
	}

	var r0 primitive.ObjectID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (primitive.ObjectID, error)); ok {
		return rf(ctx, courseName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) primitive.ObjectID); ok {
		r0 = rf(ctx, courseName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(primitive.ObjectID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, courseName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Statistics provides a mock function with given fields: ctx, countOptions
func (_m *ICourseRepository) Statistics(ctx context.Context, countOptions primitive.M) (course_domain.Statistics, error) {
	ret := _m.Called(ctx, countOptions)

	if len(ret) == 0 {
		panic("no return value specified for Statistics")
	}

	var r0 course_domain.Statistics
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M) (course_domain.Statistics, error)); ok {
		return rf(ctx, countOptions)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M) course_domain.Statistics); ok {
		r0 = rf(ctx, countOptions)
	} else {
		r0 = ret.Get(0).(course_domain.Statistics)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.M) error); ok {
		r1 = rf(ctx, countOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCompleteInUser provides a mock function with given fields: ctx, user
func (_m *ICourseRepository) UpdateCompleteInUser(ctx context.Context, user primitive.ObjectID) (*mongo.UpdateResult, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCompleteInUser")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (*mongo.UpdateResult, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *mongo.UpdateResult); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOneInAdmin provides a mock function with given fields: ctx, course
func (_m *ICourseRepository) UpdateOneInAdmin(ctx context.Context, course *course_domain.Course) (*mongo.UpdateResult, error) {
	ret := _m.Called(ctx, course)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOneInAdmin")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *course_domain.Course) (*mongo.UpdateResult, error)); ok {
		return rf(ctx, course)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *course_domain.Course) *mongo.UpdateResult); ok {
		r0 = rf(ctx, course)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *course_domain.Course) error); ok {
		r1 = rf(ctx, course)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICourseRepository creates a new instance of ICourseRepository. It also registers a testing interface on the mock and a cleanup function to assert the test expectations.
// The first argument is typically a *testing.T value.
func NewICourseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICourseRepository {
	mock := &ICourseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
